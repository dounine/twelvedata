app {
    name = "tractor"
    api = {
        key = "demo"
        key = ${?API_KEY}
    }
    server {
        host = "0.0.0.0"
        port = 30000
    }
    proxy {
        enable = false
        host = "127.0.0.1"
        port = 1087
        timeout = 5s
    }
    db {
        driver = "com.mysql.cj.jdbc.Driver"
        url = "jdbc:mysql://localhost:3306/db_jb?useUnicode=true&useSSL=false&characterEncoding=utf-8"
        url = ${?JDBC_URL}
        username = "root"
        username = ${?JDBC_USERNAME}
        password = "root"
        password = ${?JDBC_PASSWORD}
        hikaricp {
            minimumIdle = 5
            maximumPoolSize = 30
            connectionTimeout = 10
            idleTimeout = 60
            maxLifetime = 3600000
            connectionInitSql = "SELECT 1"
        }
    }
    engine {
        trigger {
            speed = 200.milliseconds
            historySize = 100
            maxSize = 1000
        }
        entrust {
            speed = 200.milliseconds
            historySize = 100
            maxSize = 1000
        }
        position {
            speed = 200.milliseconds
        }
    }
}
akka {
    loglevel = "INFO"
    http {
        host-connection-pool.max-connections = 100
        parsing.illegal-header-warnings = off
        client {
            connecting-timeout = 3s
        }
        server {
            # default 20s
            request-timeout = 10s
        }
    }
    cluster {
        log-info = off
        log-info-verbose = off
        min-nr-of-members = 1
        shutdown-after-unsuccessful-join-seed-nodes = 60s

        sharding {
            number-of-shards = 1000
            guardian-name = sharding
            # actor idled auto close
            passivate-idle-entity-after = off
        }
        bootstrap {
            new-cluster-enabled = on
        }
        seed-nodes = ["akka://"${app.name}"@127.0.0.1:25523"]
        min-nr-of-members = 1
        auto-down-unreachable-after = 10s
        seed-node-timeout = 10s
        shutdown-after-unsuccessful-join-seed-nodes = 20s
        http.route-providers-read-only = false
    }
    remote.artery {
        canonical {
          hostname = "127.0.0.1"
          port = 25523
        }
    }

    management {
        cluster.bootstrap {
            contact-point-discovery {
              discovery-method = akka.discovery
              required-contact-point-nr = 1
            }
        }
    }
    persistence{
        journal.plugin = "jdbc-journal"
        snapshot-store.plugin = "jdbc-snapshot-store"
    }
    discovery {
        method = akka-dns
    }

    actor {
      #typed.extensions = ["com.dounine.tractor.tools.akka.DatabasePool"]
      provider = cluster
      allow-java-serialization = off
      warn-about-java-serializer-usage = false
      serialize-messages = on
      serializers {
        java = "akka.serialization.JavaSerializer"
        kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      }
      serialization-bindings {
        "java.lang.Object" = kryo
        "scala.collection.immutable.Vector" = kryo
        "com.dounine.tractor.model.models.BaseSerializer" = kryo
      }
    }
}
akka-persistence-jdbc {
    logicalDeletion.enable = false
    shared-databases {
        slick {
            profile = "slick.jdbc.MySQLProfile$"
            db {
                url = ${app.db.url}
                user = ${app.db.username}
                password = ${app.db.password}
                driver = ${app.db.driver}
            }
        }
    }
}
jdbc-journal {
    use-shared-db = "slick"
    tables.journal.tableName = "jb-journal"
}
jdbc-snapshot-store {
    use-shared-db = "slick"
    tables.snapshot.tableName = "jb-snapshot"
}
jdbc-read-journal {
    use-shared-db = "slick"
    tables.journal.tableName = "jb-journal"
}

